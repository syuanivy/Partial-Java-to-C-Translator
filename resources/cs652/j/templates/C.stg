CFile(f, classes, main) ::= <<
#include \<stdio.h>
#include \<stdlib.h>

typedef struct {
    char *name;
    int size;
    void (*(*_vtable)[])();
} metadata;

typedef struct {
    metadata *clazz;
} object;

object *alloc(metadata *clazz) {
    object *p = malloc(clazz->size);
    p->clazz = clazz;
    return p;
}

<classes;separator="\n">

<main>
>>

ClassDef(class, fields, methods) ::= <<

<methods>
>>

MethodDef(m,funcName,returnType,args,body) ::= <<
>>

MainMethod(main,statements) ::= <<

<main.retType> <main.methodName>(<main.args>)
{
    <statements;separator="\n">
}



>>

Block(block, locals, instrs) ::= <<
>>

VarDef(var, typeSpec)   ::= "<typeSpec> <var.varName>"

FuncName(f)         ::= "<f.funcName>"

ObjectTypeSpec(o)   ::= "<o.typeName> *"
PrimitiveTypeSpec(p)::= "<p.typeName>"

AssignStat(a,cast,left,right) ::= "<cast><left> = <right>;"
PrintStringStat(p)  ::= "printf(<p.str>);"
PrintStat(p,args)   ::= "printf(<p.str>, <args;separator=\", \">);"
CallStat(c,call)    ::= ""
CtorCall(ctor)      ::= "((<ctor.name> *)alloc(&<ctor.name>_metadata))"
ReturnStat(r,expr)  ::= "return <expr>;"
WhileStat(w,condition, block) ::= "while ( <condition> ) {   <block>     <\n>}"
IfStat(i,condition, statement) ::= "if ( <condition> ) <statement> "
IfElseStat(i,condition, statement, elseStatement) ::= <<
if ( <condition> ) <statement>
else <elseStatement>
>>

NullRef(n)          ::= "NULL"

LiteralRef(lit)     ::= "<lit.literalRef>"
VarRef(v)           ::= "<v.varRef>"
FieldRef(f, entity, varField) ::= "<entity>-><varField>"
ThisRef(t)          ::= "this"
MethodCall(m, receiver, receiverType, fptrType, args) ::= <<
>>

FuncPtrType(f, returnType, argTypes) ::= "(*(<returnType> (*)(<argTypes;separator=\",\">))"
TypeCast(cast) ::= "<cast.cast>"
