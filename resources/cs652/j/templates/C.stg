CFile(f, classes, main) ::= <<
#include \<stdio.h>
#include \<stdlib.h>

typedef struct {
    char *name;
    int size;
    void (*(*_vtable)[])();
} metadata;

typedef struct {
    metadata *clazz;
} object;

object *alloc(metadata *clazz) {
    object *p = malloc(clazz->size);
    p->clazz = clazz;
    return p;
}



<classes;separator="\n">
<main>
>>

ClassDef(class, fields, methods, define, vtable) ::= <<
// D e f i n e  C l a s s  <class.className>
typedef struct {
    metadata *clazz;
    <fields;separator="\n">
} <class.className>;

<define:{d|#define <d>};separator="\n">


<methods; separator="\n">

void (*<class.className>_vtable[])() = {
    <vtable:{v|(void(*)())&<v>};separator=",\n">
};

metadata <class.className>_metadata = {"<class.className>", sizeof(<class.className>), &<class.className>_vtable};

>>

MethodDef(m,methodName, retType,parameters,body,slot,receiver) ::= <<
<retType> <methodName>(<parameters;separator = ", ">)
{
<body>
}
>>

MainMethod(main,declarations,statements) ::= <<
<main.retType> <main.methodName>(<main.args>)
{
    <declarations;separator="\n">
    <if(declarations)>

    <endif>
    <statements;separator="\n">
}
>>

Block(block, declarations,statements) ::= <<
    <declarations;separator="\n">
    <if(declarations)>

    <endif>
    <statements;separator="\n">
>>

VarDef(var, typeSpec)   ::= "<typeSpec> <var.varName>;"
ParaDef(var, typeSpec) ::= "<typeSpec> <var.varName>"

FuncName(f)         ::= "<f.className>_<f.methodName>"
Define(def)         ::= "<def.className>_<def.methodName>_SLOT <def.slot>"

ObjectTypeSpec(o)   ::= "<o.typeName> *"
PrimitiveTypeSpec(p)::= "<p.typeName>"

AssignStat(a,left,right) ::= "<left> = <right>;"
PrintStringStat(p)  ::= "printf(<p.str>);"
PrintStat(p,args)   ::= "printf(<p.str>, <args;separator=\", \">);"
CtorCall(ctor)      ::= "((<ctor.ctor> *)alloc(&<ctor.ctor>_metadata))"
ReturnStat(r,expr)  ::= "return <expr>;"
WhileStat(w,condition, block) ::= <<
while ( <condition> ) {
<block>
}
>>
IfStat(i,condition, statement) ::= "if ( <condition> ) <statement> "
IfElseStat(i,condition, statement, elseStatement) ::= <<
if ( <condition> ) <statement>
else <elseStatement>
>>
ExprStat(es, expr) ::= "<expr>;"

NullRef(n)          ::= "NULL"

LiteralRef(lit)     ::= "<lit.literalRef>"
VarRef(v)           ::= "<v.varRef>"
FieldRef(f, entity) ::= "<entity>-><f.varRef>"
ThisRef(t)          ::= "this"
MethodCall(m, funcName,funcPtrType, receiver, recType, args) ::= <<
<funcPtrType>(*(<receiver>)->clazz->_vtable)[<funcName>_SLOT])(<args;separator=",">)
>>

FuncPtrType(f, retType, argTypes) ::= "(*(<retType> (*)(<argTypes;separator=\",\">))"
TypeCast(cast, castTypeSpec, expr) ::= "((<castTypeSpec>)<expr>)"
